<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>最便宜的机场：一元机场</title>
    <link href="/sun/2023/10/10/%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E6%9C%BA%E5%9C%BA%EF%BC%9A%E4%B8%80%E5%85%83%E6%9C%BA%E5%9C%BA/"/>
    <url>/sun/2023/10/10/%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E6%9C%BA%E5%9C%BA%EF%BC%9A%E4%B8%80%E5%85%83%E6%9C%BA%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>这是我目前看到最便宜的机场了，啥都不用说了，1块钱（都不到）一个月的机场。。。关键Youtube油管晚上4K还能跑到15W？？？</p><p>超多的流量，流媒体解锁，不限速，不限设备，再配上这超低的价格！</p><p>开始看到这个价格，大家第一反应都是是不是要跑路了。。或者肯定会跑路吧？</p><p>咱也不关心了，这价格，即使只用一个月就跑了，也值了吧。</p><p>拿来备用，或者薅羊毛多好啊。</p><p>兄弟姐妹们，直接上吧，薅羊毛也要趁早啊，晚了就没了.</p><p>地址在这：<ahref="https://一元机场.click/#/register?code=jkfVOinA">一元机场</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>makefile教程（一）</title>
    <link href="/sun/2023/09/26/makefile%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/sun/2023/09/26/makefile%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1id="makefile简介自动化构建工具的力量">Makefile简介：自动化构建工具的力量</h1><p>Makefile是一种用于自动化构建项目的工具。它定义了一组规则，指定了如何生成目标文件。通过编写Makefile，开发人员可以简化项目的构建过程，减少手动操作的错误，并提高开发效率。</p><h2 id="makefile的基本概念">Makefile的基本概念</h2><p>Makefile由三部分组成：目标（target）、依赖（dependencies）和命令（commands）。</p><ul><li>目标：要生成的文件或执行的任务。</li><li>依赖：目标文件所依赖的文件或任务。</li><li>命令：生成目标文件或执行任务的命令。</li></ul><p>以下是一个简单的Makefile示例：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">all: program</span><br><br><span class="hljs-section">program: main.o utils.o</span><br>    gcc -o program main.o utils.o<br><br><span class="hljs-section">main.o: main.c</span><br>    gcc -c main.c<br><br><span class="hljs-section">utils.o: utils.c</span><br>    gcc -c utils.c<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>all</code>是目标，它依赖于<code>program</code>。<code>program</code>依赖于<code>main.o</code>和<code>utils.o</code>。生成<code>main.o</code>和<code>utils.o</code>的命令分别是编译<code>main.c</code>和<code>utils.c</code>。</p><h2 id="makefile的工作流程">Makefile的工作流程</h2><ol type="1"><li>定义目标、依赖和命令。在Makefile中，目标通常放在文件的顶部，依赖和命令则放在目标下面。</li><li>运行<code>make</code>命令，指定要生成的目标。例如，运行<code>make all</code>将生成名为<code>all</code>的目标。如果不指定目标，则默认生成名为<code>all</code>的目标。</li><li>Makefile检查目标是否已过期。如果目标不存在或依赖文件中的任何一个比目标更新，则目标被视为过期。</li><li>如果目标过期，Makefile会执行与目标相关的命令来生成目标。如果目标没有过期，则不会执行任何操作。</li><li>如果在执行命令时出现错误，Makefile将停止并显示错误消息。如果没有错误，则生成目标文件或执行任务。</li><li>完成后，可以运行其他目标或执行其他操作。</li></ol><h2 id="使用makefile的优点">使用Makefile的优点</h2><ol type="1"><li>自动化：通过编写一次Makefile，可以自动化构建过程，减少手动操作。</li><li>可移植性：Makefile在不同的操作系统和环境中运行，使得构建过程更加一致。</li><li>灵活性：Makefile支持条件语句、变量和函数等高级功能，可以根据项目需求进行定制。</li></ol><h2 id="makefile中的常用函数">Makefile中的常用函数</h2><p>Makefile支持自定义函数，这些函数可以用于处理字符串和文件名，以及执行其他任务。</p><p>自定义函数的定义格式为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-keyword">define</span> functionName<br>    command1<br>    command2<br>    ...<br><span class="hljs-keyword">endef</span><br></code></pre></td></tr></table></figure><p>其中，<code>functionName</code>是函数的名称，<code>command1</code>、<code>command2</code>等是函数内部的命令。</p><p>在函数内部，可以通过命令来操作变量、执行特定任务等。函数内部使用的变量在函数外部是不可见的，只有在函数内部才能访问到这些变量。</p><p>下面是一个简单的示例，展示了如何递归遍历目录下指定后缀的文件：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-keyword">define</span> rwildcard<br>    <span class="hljs-variable">$(<span class="hljs-built_in">foreach</span> d,$(<span class="hljs-built_in">wildcard</span> $(<span class="hljs-built_in">addsuffix</span> *,$(1)</span>)),<span class="hljs-variable">$(<span class="hljs-built_in">call</span> rwildcard,<span class="hljs-variable">$(d)</span>/,$(2)</span>)<span class="hljs-variable">$(<span class="hljs-built_in">filter</span> $(<span class="hljs-built_in">subst</span> *,%,$(2)</span>),<span class="hljs-variable">$(d)</span>))<br><span class="hljs-keyword">endef</span><br><br>result := <span class="hljs-variable">$(<span class="hljs-built_in">call</span> rwildcard,path,*.c)</span><br>echo <span class="hljs-variable">$(result)</span><br></code></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个名为<code>rwildcard</code>的函数，该函数接受两个参数路径和文件后缀返回匹配的文件。然后我们使用<code>$(call functionName,param1,param2,...)</code>语法来调用函数，将参数传递给函数并获取返回值。在这个例子中，<code>$(call rwildcard,path,*.c)</code>将返回后缀为.c的所有文件路径，并存储在变量<code>result</code>中。最后，使用<code>echo</code>命令输出结果。</p><p>除了上述的示例外，Makefile还提供了许多预定义的函数来处理文件名、文件路径、环境变量等。这些函数可以与自定义函数一起使用，以便更灵活地处理文件和执行任务。</p><p>在Makefile中，函数是用于处理字符串和文件名的强大工具。下面是一些常用的Makefile函数：</p><h3 id="字符串函数">1. 字符串函数</h3><ul><li><code>$(subst from,to,text)</code>:将字符串中的"from"替换为"to"。</li><li><code>$(patsubst pattern,replacement,text)</code>:将符合"pattern"的字符串替换为"replacement"。</li><li><code>$(strip string)</code>: 去掉字符串开头和结尾的空格。</li><li><code>$(findstring find,in)</code>:在"in"中查找"find"，返回"find"的起始位置。如果未找到，返回空字符串。</li><li><code>$(filter pattern...,text)</code>:返回符合"pattern"的字符串列表。</li><li><code>$(filter-out pattern...,text)</code>:返回不符合"pattern"的字符串列表。</li><li><code>$(sort list)</code>: 对字符串列表进行排序。</li><li><code>$(word n,text)</code>: 返回"text"中的第n个单词。</li><li><code>$(wordlist s,e,text)</code>:返回"text"中从第s个到第e个单词的列表。</li><li><code>$(words text)</code>: 返回"text"中的单词数量。</li><li><code>$(firstword names...)</code>:返回第一个非空、非空格字符的单词。</li><li><code>$(lastword names...)</code>:返回最后一个非空、非空格字符的单词。</li></ul><h3 id="文件名函数">2. 文件名函数</h3><ul><li><code>$(dir names...)</code>: 返回文件名中的目录部分。</li><li><code>$(notdir names...)</code>: 返回文件名中的非目录部分。</li><li><code>$(suffix names...)</code>: 返回文件名中的后缀部分。</li><li><code>$(basename names...)</code>:返回文件名中的基本名称部分（去掉后缀）。</li><li><code>$(addsuffix suffix,names...)</code>:将后缀"suffix"添加到文件名"names"上。</li><li><code>$(addprefix prefix,names...)</code>:将前缀"prefix"添加到文件名"names"上。</li><li><code>$(join list1,list2)</code>:将两个列表中的对应项连接起来，并以空格分隔。</li><li><code>$(wildcard pattern)</code>:返回符合"pattern"的文件名列表。</li><li><code>$(realpath names...)</code>: 返回文件名的绝对路径。</li><li><code>$(abspath names...)</code>:返回文件名的绝对路径（如果文件存在）。</li><li><code>$(call variable,param,param,...)</code>:使用参数扩展变量。</li></ul><h2 id="makefile通用模板">makefile通用模板</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># /**************************************</span><br><span class="hljs-comment">#  * @Author        : Retuze </span><br><span class="hljs-comment">#  * @Date          : 2023-09-24 03:50:23</span><br><span class="hljs-comment">#  * @LastEditors   : Retuze </span><br><span class="hljs-comment">#  * @LastEditTime  : 2023-09-25 18:45:48</span><br><span class="hljs-comment">#  * @Description   : </span><br><span class="hljs-comment">#  */*************************************</span><br><br><span class="hljs-comment"># Application name</span><br>BUILD_EXE    = OpenGL.exe<br><span class="hljs-comment"># Output directory</span><br>BUILD_OUTPUT = build<br><span class="hljs-comment"># Source directory</span><br>SOURCES  = <br><span class="hljs-comment"># Add a search directory for header files other than the $(SOURCES) directory</span><br>INCLUDES  = -Idepends/<span class="hljs-keyword">include</span><br><span class="hljs-comment"># Add a search directory for libraries</span><br>LD_DIRS      = -Ldepends<br><span class="hljs-comment"># Add required libraries</span><br>LD_LIBS      = -lglfw3 -lopengl32 -lgdi32<br><br><br><span class="hljs-comment"># 预定义的一些函数</span><br><br><span class="hljs-comment"># brief : 打印编译消息</span><br><span class="hljs-comment"># eg : $(call print,compiling,file)</span><br><span class="hljs-keyword">ifeq</span> (<span class="hljs-variable">$(OS)</span>,Windows_NT)<br>print=echo $(1) <span class="hljs-variable">$(<span class="hljs-built_in">notdir</span> $(2)</span>)...<br><span class="hljs-keyword">else</span><br>print=printf <span class="hljs-string">&quot;$(1) $(notdir $(2))...\n&quot;</span><br><span class="hljs-keyword">endif</span><br><br><span class="hljs-comment"># brief : 递归遍历指定后缀的文件</span><br><span class="hljs-comment"># eg : $(call rwildcard,path,suffix)</span><br>rwildcard = <span class="hljs-variable">$(<span class="hljs-built_in">foreach</span> d,$(<span class="hljs-built_in">wildcard</span> $(<span class="hljs-built_in">addsuffix</span> *,$(1)</span>)),<span class="hljs-variable">$(<span class="hljs-built_in">call</span> rwildcard,<span class="hljs-variable">$(d)</span>/,$(2)</span>)<span class="hljs-variable">$(<span class="hljs-built_in">filter</span> $(<span class="hljs-built_in">subst</span> *,%,$(2)</span>),<span class="hljs-variable">$(d)</span>))<br><br><span class="hljs-comment"># brief : 删除文件或者文件夹</span><br><span class="hljs-comment"># eg : $(RM) file</span><br><span class="hljs-keyword">ifeq</span> (<span class="hljs-variable">$(OS)</span>,Windows_NT)<br>RM = del /Q<br><span class="hljs-keyword">else</span><br>RM = rm -rf<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-comment"># brief : 是否打开调试输出信息（默认关闭）</span><br><span class="hljs-keyword">ifeq</span> (<span class="hljs-variable">$(Debug)</span>,0)<br>at = <br><span class="hljs-keyword">else</span> <br>at = @<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-comment"># 编译命令</span><br>CPP     = <span class="hljs-variable">$(CROSS_COMPILE)</span>g++<br>CC      = <span class="hljs-variable">$(CROSS_COMPILE)</span>gcc<br>LD      = <span class="hljs-variable">$(CROSS_COMPILE)</span>ld<br>AR      = <span class="hljs-variable">$(CROSS_COMPILE)</span>ar<br>NM      = <span class="hljs-variable">$(CROSS_COMPILE)</span>nm<br>OBJCOPY = <span class="hljs-variable">$(CROSS_COMPILE)</span>objcopy<br>OBJDUMP = <span class="hljs-variable">$(CROSS_COMPILE)</span>objdump<br>READELF = <span class="hljs-variable">$(CROSS_COMPILE)</span>readelf<br>STRIP   = <span class="hljs-variable">$(CROSS_COMPILE)</span>strip<br><br><span class="hljs-keyword">export</span> CPP CC LD AR NM OBJCOPY OBJDUMP READELF STRIP<br><br><span class="hljs-keyword">ifndef</span> SOURCES<br>SOURCES := ./<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-keyword">ifeq</span> (<span class="hljs-variable">$(<span class="hljs-built_in">strip</span> <span class="hljs-variable">$(BUILD_OUTPUT)</span>)</span>, )<br>OBJ_FOLDER =<br><span class="hljs-keyword">else</span><br>OBJ_FOLDER = <span class="hljs-variable">$(<span class="hljs-built_in">strip</span> <span class="hljs-variable">$(BUILD_OUTPUT)</span>)</span>/<br><span class="hljs-keyword">endif</span><br><br>INCLUDES    += <span class="hljs-variable">$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">foreach</span> d,$(<span class="hljs-built_in">call</span> rwildcard,<span class="hljs-variable">$(SOURCES)</span>,*.h)</span>,<span class="hljs-variable">$(<span class="hljs-built_in">dir</span> -I$d)</span>))<br>C_SOURCES   = <span class="hljs-variable">$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">call</span> rwildcard,<span class="hljs-variable">$(SOURCES)</span>,*.c)</span>)<br>CPP_SOURCES = <span class="hljs-variable">$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">call</span> rwildcard,<span class="hljs-variable">$(SOURCES)</span>,*.cpp)</span>)<br>ASM_SOURCES = <span class="hljs-variable">$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">call</span> rwildcard,<span class="hljs-variable">$(SOURCES)</span>,*.s)</span>)<br>ASM_SOURCES += <span class="hljs-variable">$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">call</span> rwildcard,<span class="hljs-variable">$(SOURCES)</span>,*.S)</span>)<br><br>OBJECTS = <span class="hljs-variable">$(<span class="hljs-built_in">addprefix</span> <span class="hljs-variable">$(OBJ_FOLDER)</span>,$(<span class="hljs-built_in">notdir</span> $(<span class="hljs-built_in">patsubst</span> %.c,%.o,<span class="hljs-variable">$(C_SOURCES)</span>)</span>))<br>OBJECTS += <span class="hljs-variable">$(<span class="hljs-built_in">addprefix</span> <span class="hljs-variable">$(OBJ_FOLDER)</span>,$(<span class="hljs-built_in">notdir</span> $(<span class="hljs-built_in">patsubst</span> %.cpp,%.o,<span class="hljs-variable">$(CPP_SOURCES)</span>)</span>))<br>OBJECTS += <span class="hljs-variable">$(<span class="hljs-built_in">addprefix</span> <span class="hljs-variable">$(OBJ_FOLDER)</span>,$(<span class="hljs-built_in">notdir</span> $(<span class="hljs-built_in">patsubst</span> %.s,%.o,<span class="hljs-variable">$(ASM_SOURCES)</span>)</span>))<br>OBJECTS += <span class="hljs-variable">$(<span class="hljs-built_in">addprefix</span> <span class="hljs-variable">$(OBJ_FOLDER)</span>,$(<span class="hljs-built_in">notdir</span> $(<span class="hljs-built_in">patsubst</span> %.S,%.o,<span class="hljs-variable">$(ASM_SOURCES)</span>)</span>))<br><br>DEPENDS = $(OBJECTS:.o=.d)<br><br><span class="hljs-comment"># 宏定义</span><br>CC_SYMBOLS  = <br>ASM_SYMBOLS =<br><br><span class="hljs-comment"># Flags</span><br>COMMON_FLAGS = -g -O2<br><br>C_FLAGS    =  <br>CPP_FLAGS  =  <br>ASM_FLAGS  = <br><br>CFLAGS   = <span class="hljs-variable">$(<span class="hljs-built_in">strip</span> <span class="hljs-variable">$(COMMON_FLAGS)</span> <span class="hljs-variable">$(C_FLAGS)</span> <span class="hljs-variable">$(INCLUDES)</span> <span class="hljs-variable">$(CC_SYMBOLS)</span> -c -MMD -MP)</span><br>CPPFLAGS = <span class="hljs-variable">$(<span class="hljs-built_in">strip</span> <span class="hljs-variable">$(COMMON_FLAGS)</span> <span class="hljs-variable">$(CPP_FLAGS)</span> <span class="hljs-variable">$(INCLUDES)</span> <span class="hljs-variable">$(CC_SYMBOLS)</span> -c -MMD -MP)</span><br>ASFLAGS  = <span class="hljs-variable">$(<span class="hljs-built_in">strip</span> <span class="hljs-variable">$(COMMON_FLAGS)</span> <span class="hljs-variable">$(ASM_FLAGS)</span> <span class="hljs-variable">$(INCLUDES)</span> <span class="hljs-variable">$(ASM_SYMBOLS)</span> -c)</span><br><br>VPATH := <span class="hljs-variable">$(SOURCES)</span><br>VPATH += <span class="hljs-variable">$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$(C_SOURCES)</span>)</span>)<br>VPATH += <span class="hljs-variable">$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$(CPP_SOURCES)</span>)</span>)<br>VPATH += <span class="hljs-variable">$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$(ASM_SOURCES)</span>)</span>)<br>VPATH += <span class="hljs-variable">$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">dir</span> <span class="hljs-variable">$(INCLUDES)</span>)</span>)<br><br>PHONY := __all__<br><span class="hljs-section">__all__: <span class="hljs-variable">$(BUILD_EXE)</span> check</span><br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(<span class="hljs-built_in">call</span> print,successful build,<span class="hljs-variable">$&lt;</span>)</span><br><br><span class="hljs-comment"># Compile C sources.</span><br><span class="hljs-variable">$(OBJ_FOLDER)</span>%.o : %.c<br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(<span class="hljs-built_in">call</span> print,compiling,<span class="hljs-variable">$&lt;</span>)</span><br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(CC)</span> <span class="hljs-variable">$(CFLAGS)</span> <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-comment"># Compile C++ sources.</span><br><span class="hljs-variable">$(OBJ_FOLDER)</span>%.o : %.cpp<br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(<span class="hljs-built_in">call</span> print,compiling,<span class="hljs-variable">$&lt;</span>)</span><br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(CPP)</span> <span class="hljs-variable">$(CPPFLAGS)</span> <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-comment"># Compile ASM sources.</span><br><span class="hljs-variable">$(OBJ_FOLDER)</span>%.o : %.s<br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(<span class="hljs-built_in">call</span> print,assebmling,<span class="hljs-variable">$&lt;</span>)</span><br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(CPP)</span> <span class="hljs-variable">$(ASMFLAGS)</span> <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-comment"># Compile ASM sources.</span><br><span class="hljs-variable">$(OBJ_FOLDER)</span>%.o : %.S<br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(<span class="hljs-built_in">call</span> print,assebmling,<span class="hljs-variable">$&lt;</span>)</span><br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(CPP)</span> <span class="hljs-variable">$(ASMFLAGS)</span> <span class="hljs-variable">$&lt;</span> -o <span class="hljs-variable">$@</span><br><br><span class="hljs-variable">$(BUILD_OUTPUT)</span>:<br><span class="hljs-keyword">ifeq</span> (<span class="hljs-variable">$(OS)</span>,Windows_NT)<br><span class="hljs-variable">$(at)</span>-mkdir <span class="hljs-variable">$(BUILD_OUTPUT)</span><br><span class="hljs-keyword">else</span><br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(<span class="hljs-built_in">shell</span> mkdir <span class="hljs-variable">$(BUILD_OUTPUT)</span> 2&gt;/dev/null)</span><br><span class="hljs-keyword">endif</span><br><br><span class="hljs-comment"># Build executable</span><br><span class="hljs-variable">$(BUILD_EXE)</span> : <span class="hljs-variable">$(BUILD_OUTPUT)</span> <span class="hljs-variable">$(OBJECTS)</span><br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(<span class="hljs-built_in">call</span> print,linking,<span class="hljs-variable">$@</span>)</span><br><span class="hljs-variable">$(at)</span><span class="hljs-variable">$(CPP)</span> <span class="hljs-variable">$(LD_DIRS)</span> -o <span class="hljs-variable">$(OBJ_FOLDER)</span><span class="hljs-variable">$@</span> <span class="hljs-variable">$(OBJECTS)</span> <span class="hljs-variable">$(LD_LIBS)</span> <span class="hljs-variable">$(LD_OPTIONS)</span><br><br><span class="hljs-keyword">-include</span> <span class="hljs-variable">$(DEPENDS)</span><br><br>PHONY += clean<br><span class="hljs-section">clean:</span><br><span class="hljs-keyword">ifdef</span> BUILD_OUTPUT<br><span class="hljs-variable">$(at)</span>-<span class="hljs-variable">$(RM)</span> <span class="hljs-variable">$(<span class="hljs-built_in">subst</span> /,\\,<span class="hljs-variable">$(OBJ_FOLDER)</span>)</span><br><span class="hljs-keyword">else</span><br><span class="hljs-variable">$(at)</span>-<span class="hljs-variable">$(RM)</span> <span class="hljs-variable">$(<span class="hljs-built_in">subst</span> /,\\,<span class="hljs-variable">$(OBJECTS)</span>)</span> <span class="hljs-variable">$(<span class="hljs-built_in">subst</span> /,\\,<span class="hljs-variable">$(DEPENDS)</span>)</span> <span class="hljs-variable">$(<span class="hljs-built_in">subst</span> /,\\,<span class="hljs-variable">$(BUILD_EXE)</span>)</span><br><span class="hljs-keyword">endif</span><br><br>PHONY += show<br><span class="hljs-section">show:</span><br>@echo <span class="hljs-string">&quot;PHONY=<span class="hljs-variable">$(PHONY)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;BUILD_OUTPUT = <span class="hljs-variable">$(BUILD_OUTPUT)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;OBJ_FOLDER = <span class="hljs-variable">$(OBJ_FOLDER)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;SOURCES = <span class="hljs-variable">$(SOURCES)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;C_SOURCES = <span class="hljs-variable">$(C_SOURCES)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;CPP_SOURCES = <span class="hljs-variable">$(CPP_SOURCES)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;ASM_SOURCES = <span class="hljs-variable">$(ASM_SOURCES)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;OBJECTS = <span class="hljs-variable">$(OBJECTS)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;DEPENDS = <span class="hljs-variable">$(DEPENDS)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;INCLUDES = <span class="hljs-variable">$(INCLUDES)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;CFLAGS = <span class="hljs-variable">$(CFLAGS)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;CPPFLAGS = <span class="hljs-variable">$(CPPFLAGS)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;ASMFLAGS = <span class="hljs-variable">$(ASMFLAGS)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;LD_DIRS = <span class="hljs-variable">$(LD_DIRS)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;LD_LIBS = <span class="hljs-variable">$(LD_LIBS)</span>&quot;</span><br>@echo <span class="hljs-string">&quot;LD_OPTIONS = <span class="hljs-variable">$(LD_OPTIONS)</span>&quot;</span><br><br>PHONY += check<br><span class="hljs-section">check:</span><br><span class="hljs-variable">$(<span class="hljs-built_in">if</span> $(<span class="hljs-built_in">subst</span> /,\\,$(<span class="hljs-built_in">filter</span>-out <span class="hljs-variable">$(OBJECTS)</span> <span class="hljs-variable">$(DEPENDS)</span>,$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">call</span> rwildcard,<span class="hljs-variable">$(BUILD_OUTPUT)</span>,*.o)</span>) <span class="hljs-variable">$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">call</span> rwildcard,<span class="hljs-variable">$(BUILD_OUTPUT)</span>,*.d)</span>))),<span class="hljs-variable">$(at)</span>-<span class="hljs-variable">$(RM)</span> <span class="hljs-variable">$(<span class="hljs-built_in">subst</span> /,\\,$(<span class="hljs-built_in">filter</span>-out <span class="hljs-variable">$(OBJECTS)</span> <span class="hljs-variable">$(DEPENDS)</span>,$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">call</span> rwildcard,<span class="hljs-variable">$(BUILD_OUTPUT)</span>,*.o)</span>) <span class="hljs-variable">$(<span class="hljs-built_in">sort</span> $(<span class="hljs-built_in">call</span> rwildcard,<span class="hljs-variable">$(BUILD_OUTPUT)</span>,*.d)</span>))))<br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: $(PHONY)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git使用笔记</title>
    <link href="/sun/2023/09/22/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/sun/2023/09/22/git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>Git是一种分布式版本控制系统，可以快速高效地处理从非常小到非常大的项目的版本管理。Git是100%免费的，可以处理任何大小的项目，并且非常易于学习。</p><p>以下是 Git 的基本命令：</p><ol type="1"><li><strong>初始化一个新的 Git 仓库</strong>在你的项目目录中，运行以下命令来初始化一个新的 Git 仓库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>添加文件到 Git</strong> 使用以下命令将文件添加到 Git仓库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add &lt;file&gt;<br></code></pre></td></tr></table></figure><p>如果你想添加所有文件，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br></code></pre></td></tr></table></figure><ol start="3" type="1"><li><strong>提交文件</strong> 使用以下命令提交你的文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;Commit message&quot;</span><br></code></pre></td></tr></table></figure><ol start="4" type="1"><li><strong>查看 Git 历史记录</strong> 使用以下命令查看 Git历史记录：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><ol start="5" type="1"><li><strong>推送代码到远程仓库</strong>使用以下命令将你的代码推送到远程仓库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin &lt;branch&gt;<br></code></pre></td></tr></table></figure><ol start="6" type="1"><li><strong>拉取代码</strong> 使用以下命令拉取远程仓库的代码：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin &lt;branch&gt;<br></code></pre></td></tr></table></figure><ol start="7" type="1"><li><strong>创建分支</strong> 使用以下命令创建一个新的分支：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch &lt;branch-name&gt;<br></code></pre></td></tr></table></figure><ol start="8" type="1"><li><strong>切换分支</strong>使用以下命令切换到一个已经存在的分支：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout &lt;branch-name&gt;<br></code></pre></td></tr></table></figure><ol start="9" type="1"><li><strong>合并分支</strong>使用以下命令将一个分支合并到另一个分支：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git merge &lt;branch-name&gt;<br></code></pre></td></tr></table></figure><ol start="10" type="1"><li><strong>删除分支</strong> 使用以下命令删除一个分支：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -d &lt;branch-name&gt;<br></code></pre></td></tr></table></figure><ol start="11" type="1"><li><strong>查看分支</strong> 使用以下命令查看所有的分支：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -a<br></code></pre></td></tr></table></figure><p>除了以上基本命令外，Git还有许多常用的命令。以下是一些例子：</p><ol type="1"><li><strong>克隆一个远程仓库</strong>使用以下命令克隆一个远程仓库到本地：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> &lt;repository-url&gt;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><strong>查看仓库状态</strong> 使用以下命令查看 Git 仓库的状态：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><p>如果你想查看文件的不同，你可以使用 <code>git diff</code>。 3.<strong>查看特定的提交</strong> 使用以下命令查看特定的提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git show &lt;commit-id&gt;<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li><strong>查看提交日志</strong> 使用以下命令查看提交日志：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>或者你可以使用 <code>git reflog</code>查看所有的提交记录，包括错误的提交。</p><ol start="5" type="1"><li><strong>重置HEAD</strong>如果你想重置你的当前分支到最近的提交，你可以使用以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard HEAD<br></code></pre></td></tr></table></figure><p>注意这个命令会丢失所有未提交的修改。如果你想保留这些修改，你可以使用<code>git stash</code>。</p><ol start="6" type="1"><li><strong>撤消修改</strong>如果你想撤消工作区的修改（还未添加到暂存区），你可以使用以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -- &lt;file&gt;<br></code></pre></td></tr></table></figure><p>如果你想撤消暂存区的修改（已经添加到暂存区，但还未提交），你可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset HEAD &lt;file&gt;<br></code></pre></td></tr></table></figure><p>如果你想撤消已经提交的修改（在版本库中，但还未推送到远程仓库），你可以使用以下命令：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git revert <span class="hljs-operator">&lt;</span><span class="hljs-keyword">commit</span><span class="hljs-operator">-</span>id<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure>注意这个命令会创建一个新的提交，这个提交是撤销了指定提交的修改。</p><ol start="7" type="1"><li><strong>删除文件</strong>如果你想删除一个文件，你可以使用以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">rm</span> &lt;file&gt;<br></code></pre></td></tr></table></figure><p>如果文件是工作区的修改（还未添加到暂存区），这个命令会将文件从工作区删除。如果文件已经添加到暂存区或者已经提交，这个命令会从版本库中删除文件。</p><ol start="8" type="1"><li><p><strong>连接远程仓库</strong>如果你想连接你的远程仓库，你可以使用以下命令： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v   <span class="hljs-comment"># 查看所有远程仓库的详细信息 </span><br>git remote set-url origin &lt;new-url&gt;  <span class="hljs-comment"># 更改远程仓库的URL </span><br></code></pre></td></tr></table></figure></p></li><li><p><strong>详解git ignore的使用方法</strong></p></li></ol><p>.gitignore文件在Git版本控制系统中具有重要作用，它能够让Git忽略追踪某些文件或者文件夹。这对于我们不想提交到仓库中的文件，如一些运行日志等，非常有用。我们可以在.gitignore文件中指定哪些文件或文件夹需要被忽略，配置完成后，Git将自动忽略满足配置的文件。</p><p>使用.gitignore的方法如下：</p><p>将需要被忽略的文件添加到.gitignore文件中。在.gitignore文件中，每一行都代表一个忽略规则。例如，你可以在文件中添加“*.log”以忽略所有.log后缀的文件，或者“bin/”以忽略名为bin的文件夹及其所有内容。.gitignore只对尚未在暂存区（cached）中的文件起作用。如果一个文件已经被添加到暂存区，那么你需要先从暂存区中移除该文件。这可以通过使用“gitrm --cached <file>”命令来完成。移除之后，该文件就不会再被Git追踪。如果你希望在每个clone下来的库中都手动设置不要检查特定文件的更改情况，你可以在当地仓库中使用“gitupdate-index --assume-unchanged<file>”命令。这样，远程库中的文件就会被自动删除。请注意，如果有多个匹配规则，那么Git会按照它们在.gitignore文件中的顺序来应用这些规则。同时，对于复杂的目录结构，可以使用通配符和正则表达式来指定忽略规则。</p><p>总的来说，.gitignore是一个强大的工具，能够帮助你更好地控制Git仓库的内容，确保只有你希望追踪的文件被包含进来。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>makedown常用语法</title>
    <link href="/sun/2023/09/21/makedown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <url>/sun/2023/09/21/makedown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><strong>标题</strong></p><p>markdown对于标题有两种语法：类 Setext 和类 atx 形式</p><p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 -（第二阶标题） <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">Hello world</span><br><span class="hljs-section">===========</span><br><br><span class="hljs-section">Hello world</span><br><span class="hljs-section">-----------</span><br></code></pre></td></tr></table></figure></p><h1 id="hello-world">Hello world</h1><h2 id="hello-world-1">Hello world</h2><p>类 Atx 形式是在行首插入1 到6 个 #，随#的数量增加，标题级数减少<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Hello world<br><br>## Hello world<br></code></pre></td></tr></table></figure></p><h1 id="hello-world-2">Hello world</h1><h2 id="hello-world-3">Hello world</h2><p><strong>字体</strong></p><p>Markdown用星号（*）和底线（_）作为标记强调字词的符号，但前后符号必须统一</p><p>一个显示倾斜，两个显示加粗，三个星号加粗倾斜，两个波浪显示删除线，两个等号显示高亮<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*Hello world*</span><br><br><span class="hljs-strong">**Hello world**</span><br><br><span class="hljs-strong">**<span class="hljs-emphasis">*Hello world*</span>**</span><br><br>~~Hello world~~<br></code></pre></td></tr></table></figure> <em>Hello world</em></p><p><strong>Hello world</strong></p><p><strong><em>Hello world</em></strong></p><p><del>Hello world</del></p><p><strong>分割线</strong></p><p>一行中用三个以上的星号、减号、底线来建立一个分隔线，在星号或是减号中间插入空格不影响使用。下面几写法<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">hello<br><br>-----------<br><br>hello<br><br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">___</span><br><span class="hljs-strong"></span><br><span class="hljs-strong">hello</span><br><span class="hljs-strong"></span><br><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br></code></pre></td></tr></table></figure> hello</p><hr /><p>hello</p><hr /><p>hello</p><hr /><p><strong>引用</strong></p><p>只需在引用的文字前加 &gt; 建立一个区块，然后在每行的最前面加上 &gt;（偷懒写法）简单的话整个段落的第一行最前面加上 &gt;即可。引用可以嵌套，只需根据层次，加入不同数量的&gt;即可(这里hexo的makedown渲染有问题显示不了嵌套引用)</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&gt;According <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> picture,we can see a pot containing a <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> blocks.There are Chines <span class="hljs-built_in">characters</span> <span class="hljs-keyword">on</span> them,,such <span class="hljs-keyword">as</span> [Kung fu],[Buddhism] <span class="hljs-keyword">and</span> [Peking opera].In addition,<span class="hljs-keyword">the</span> title <span class="hljs-keyword">below</span> <span class="hljs-keyword">the</span> picture <span class="hljs-keyword">is</span> very eye-catching:cultural hotpot enriches our lives.On <span class="hljs-keyword">the</span> one hand,this painting <span class="hljs-keyword">is</span> very simple,<span class="hljs-keyword">with</span> only a few strokes,<span class="hljs-keyword">but</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> other hand,<span class="hljs-keyword">it</span> evokes <span class="hljs-keyword">my</span> deep thoughts <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> subject <span class="hljs-keyword">behind</span> <span class="hljs-keyword">it</span>.<br><br>&gt;&gt;The idea this cartoon wishes <span class="hljs-keyword">to</span> convey <span class="hljs-keyword">is</span> very clear,mainly calling <span class="hljs-keyword">for</span> us <span class="hljs-keyword">to</span> attach more importance <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> quality <span class="hljs-keyword">of</span> opening our mind <span class="hljs-keyword">to</span> different cultures.First <span class="hljs-keyword">of</span> all,integrating other excellent cultures <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> basis <span class="hljs-keyword">for</span> our competitive advantage.Undoubtedly,<span class="hljs-keyword">if</span> citizens <span class="hljs-keyword">in</span> a nation cannot culivate this quality <span class="hljs-keyword">from</span> an early age,this nation will be <span class="hljs-keyword">put</span> <span class="hljs-keyword">in</span> a very disadvantageous position when <span class="hljs-keyword">it</span> comes <span class="hljs-keyword">to</span> competing <span class="hljs-keyword">with</span> others,<span class="hljs-keyword">and</span> they are more likely <span class="hljs-keyword">to</span> fail.Secondly,<span class="hljs-keyword">the</span> progress <span class="hljs-keyword">of</span> embracing foreign cultures outstanding parts <span class="hljs-keyword">is</span> crucial <span class="hljs-keyword">for</span> us <span class="hljs-keyword">to</span> foster a positive mindest.No one candeny <span class="hljs-keyword">the</span> fact <span class="hljs-keyword">that</span> sticking <span class="hljs-keyword">to</span> this goal can,<span class="hljs-keyword">to</span> a large extern,motivate us <span class="hljs-keyword">to</span> achieve excellence.<br></code></pre></td></tr></table></figure><blockquote><p>According to the picture,we can see a pot containing a number ofblocks.There are Chines characters on them,,such as [Kung fu],[Buddhism]and [Peking opera].In addition,the title below the picture is veryeye-catching:cultural hotpot enriches our lives.On the one hand,thispainting is very simple,with only a few strokes,but on the other hand,itevokes my deep thoughts on the subject behind it. &gt;The idea thiscartoon wishes to convey is very clear,mainly calling for us to attachmore importance to the quality of opening our mind to differentcultures.First of all,integrating other excellent cultures is the basisfor our competitive advantage.Undoubtedly,if citizens in a nation cannotculivate this quality from an early age,this nation will be put in avery disadvantageous position when it comes to competing with others,andthey are more likely to fail.Secondly,the progress of embracing foreigncultures outstanding parts is crucial for us to foster a positivemindest.No one candeny the fact that sticking to this goal can,to alarge extern,motivate us to achieve excellence.</p></blockquote><p><strong>表格</strong></p><p>表格的第二行为了间隔表格和内容，同时起到创建表格的作用，而:号的作用就是调节内容的位置，如上图所示，不加默认居左，在两边加：文字居中，在右边加：文字居右</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 右对齐 </span>|<span class="hljs-string"> 居中对齐 </span>|<br>|<span class="hljs-string"> :-----</span>|<span class="hljs-string"> ----: </span>|<span class="hljs-string"> :----: </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure><table><thead><tr class="header"><th style="text-align: left;">左对齐</th><th style="text-align: right;">右对齐</th><th style="text-align: center;">居中对齐</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">单元格</td><td style="text-align: right;">单元格</td><td style="text-align: center;">单元格</td></tr><tr class="even"><td style="text-align: left;">单元格</td><td style="text-align: right;">单元格</td><td style="text-align: center;">单元格</td></tr></tbody></table><p><strong>链接</strong></p><p>超链接Markdown语法代码：<a href="超链接地址"title="超链接title">超链接显示名</a>，还有使用尖括号可以把URL或者email地址变成可点击的链接。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[百度]</span>(baidu.com)<br><br>&lt;baidu<span class="hljs-selector-class">.com</span>&gt;<br></code></pre></td></tr></table></figure><p><a href="https://baidu.com">百度</a></p><p><a href="https://baidu.com" class="uri">https://baidu.com</a></p><p><br></p><p><strong>段落与换行</strong></p><p>段落：要创建段落，请使用空白行将一行或多行文本进行分隔。</p><p>换行：在一行的末尾添加两个或多个空格，然后按回车键，即可创建一个换行或者直接使用<code>&lt;br&gt;</code>换行</p><p><br></p><p><strong>列表</strong></p><p>Markdown的列表分别为有序列表和无序列表。无序列表使用星号、加号或是减号作为列表标记，且同一列表的标记符号需相同。有序列表则使用数字接着一个英文句点作为标记。列表可以嵌套，级和级之间敲2个空格即可实现。</p><p><br></p><p><strong>代码块</strong></p><p>在Markdown中加入代码块有两种方式：代码块，代码区块</p><p>代码块：只要简单地缩进 4 个空格或是 1个制表符就可以，第二种方法就是对于单行代码：代码之间分别用一个反引号包起来即可；</p><p>代码区块：代码之间分别用三个反引号包起来，可以在上面的 ```后面注明你的代码类型，可以产生相应的代码高亮效果</p><p><br></p><p><strong>图片</strong></p><p>使用感叹号 (!),然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">![替代文本](./picture.png<span class="hljs-string">&quot;图片标题&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Scrcpy使用教程</title>
    <link href="/sun/2023/09/20/Scrcpy%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/sun/2023/09/20/Scrcpy%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Scrcpy下载地址：<a href="https://github.com/Genymobile/scrcpy"class="uri">https://github.com/Genymobile/scrcpy</a></p><p><br></p><p><strong>使用ADB连接</strong></p><p>有线连接或者无线连接都需要手机打开开发者模式的usb调试，无线连接还需要开启无线调试<br />无线连接需要通过命令 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb connect ip:5555<br></code></pre></td></tr></table></figure>连接成功后通过adb命令可以看到设备序列号UUID <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb devices<br></code></pre></td></tr></table></figure>只有一个设备的话可以直接启动scrcpy投屏 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scrcpy<br></code></pre></td></tr></table></figure>有多个设备的情况下可以通过下面命令选择指定设备</p><p>无线投屏 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scrcpy -s ip:5555<br></code></pre></td></tr></table></figure> 有线连接 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scrcpy -s UUID<br></code></pre></td></tr></table></figure></p><p><strong>屏幕常亮</strong></p><p>scrcpy本身支持有线模式下的屏幕常亮,不过无线连接时不能保持屏幕常亮.我们可以通过adb命令来解决这个问题<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell input keyevent 0<br></code></pre></td></tr></table></figure>原理也很简单,就是adb模拟按下按键0,按键0在安卓系统里代表未知按键,没有作用,不过能保持屏幕常亮,这里我使用python脚本来每10s执行一次adb指令<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    os.system(<span class="hljs-string">&quot;adb shell input keyevent 0&quot;</span>)<br>    time.sleep(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure></p><p><br></p><p><strong>Scrcpy常用快捷键</strong></p><p><strong>MOD在Windows下默认为Alt</strong></p><table><thead><tr class="header"><th>快捷键</th><th>作用</th></tr></thead><tbody><tr class="odd"><td>Ctrl+c</td><td>复制</td></tr><tr class="even"><td>Ctrl+x</td><td>剪切</td></tr><tr class="odd"><td>Ctrl+v</td><td>粘贴 （但仅在 Android &gt;= 7 上支持）</td></tr><tr class="even"><td>MOD+f</td><td>全屏</td></tr><tr class="odd"><td>MOD+ [ ← → ]</td><td>向左向右旋转</td></tr><tr class="even"><td>MOD+s</td><td>最近任务</td></tr><tr class="odd"><td>MOD+g</td><td>将窗口大小调整为 1:1</td></tr><tr class="even"><td>MOD+w | 双击左键</td><td>调整窗口大小以去除黑边</td></tr><tr class="odd"><td>MOD+h | 中键单击</td><td>点击 HOME</td></tr><tr class="even"><td>MOD+b | 右键单击</td><td>点击返回</td></tr><tr class="odd"><td>MOD+m</td><td>点击（解锁屏幕）⁴MENU</td></tr><tr class="even"><td>MOD+↑↓</td><td>音量加减</td></tr><tr class="odd"><td>MOD+p</td><td>点击电源键</td></tr><tr class="even"><td>MOD+o</td><td>关闭设备屏幕（保持镜像）</td></tr><tr class="odd"><td>MOD+Shift+o</td><td>打开设备屏幕</td></tr><tr class="even"><td>MOD+r</td><td>切换横屏竖屏</td></tr><tr class="odd"><td>MOD+n</td><td>展开通知面板</td></tr></tbody></table><p><br></p><p><strong>文件传输</strong></p><p>直接把文件拖到scrcpy窗口文件就会通过adb传输到手机Download目录</p><p><strong>键盘映射</strong></p><p>在投屏上可以直接用电脑键盘输入英文,只有电脑键盘为英文模式下有用</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>E类放大器原理</title>
    <link href="/sun/2023/09/20/E%E7%B1%BB%E6%94%BE%E5%A4%A7%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    <url>/sun/2023/09/20/E%E7%B1%BB%E6%94%BE%E5%A4%A7%E5%99%A8%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://www.kechuang.org/t/78392"class="uri">https://www.kechuang.org/t/78392</a></p><p>不少人第一次听说E类功放都是因为那个class ESSTC，从网上查询却发现资料少的可怜，其原理和设计方法就更无从谈及。下面我就根据书中所写以及自己的理解讲一下。讲之前还需说一下，因为电路分析必须涉及微积分，所以不懂的最好查一下，不需要会解，能明白符号含义和表达式意义就行。</p><p><strong>E类功放产生的原因</strong></p><p><br></p><p>D类功放是较早出现的一类开关功放，其出现促进了逆变技术的发展。由于晶体管处于开关状态，理论上可以达到100%的效率。由于晶体管势垒电容、扩散电容以及电路中分布电容的影响，晶体管由饱和到截止或由截止到饱和，都需要一定的转换时间。因而导致转换时间内管子的集电极电流和集电极电压均会有较大的数值致使管耗增加。寄生电容不太大，工作频率较低时，可忽略其影响。然而工作频率较高时，管耗的增加就无法忽略，使效率降低，甚至使器件损坏。为了弥补这一缺陷，E类功放应运而生。</p><p><strong>E类功放的原理</strong></p><p><br></p><p>下图为E类功放的电路图</p><figure><img src="00.png" alt="E类功放的电路图" /><figcaption aria-hidden="true">E类功放的电路图</figcaption></figure><p>与电源相连的的电感为射频扼流圈，允许直流通过为电路提供能量，阻止射频电流从此传出，理想状态下感抗无穷大。LX的作用是提供一定的感抗，具体的原因会在之后说明。LS和CS构成谐振于信号基波频率的串联谐振电路，理想状态下品质因数Q无穷大。RL为负载电阻。开关管等效为开关和输出寄生电容的并联电路，用开关代替开关管等效电路中的开关，电容CP代替开关管输出端的寄生电容。</p><p>电路图中标出了部分电压或电流。Idc是输入电流；i(t)和u(t)分别是开关和电容CP并联部分的电流和电压，也就是开关管的电流和电压，都是时间函数；isw(t)和ic(t)分别是开关和电容CP两端的电流，也都是时间函数；Irfcosωt是射频电流的时间函数，射频电流峰值即为系数Irf。</p><p>设1.png。下图为这些电压或电流随时间变化的图像，也就是他们的波形。由上图可以看出，i(θ)是输入电流和射频电流之和。-α1到2π-α1为一个工作周期。-α1到α2开关管导通，这时u(θ)等于零，ic(θ)也等于零，isw(θ)和i(θ)相同；α2到2π-α1开关管截止，这时isw(θ)等于零，ic(θ)与i(θ)相同，u(θ)即为电容两端电流的积分。2π-α1时，u(θ)恰好降为零，然后进入下一周期，开关管导通。可以看出，寄生电容两端电压为零时开关管才导通，这就解决了之前提到的问题。开关管电压和电流乘积始终为零，因此其理论效率为100%。0.png</p><p><strong>E类功放的设计</strong></p><p><br></p><p>-α1到α2开关管导通，因此开关管导通角为 2.png ① 根据之前的分析可以得到3.png ② 设 4.png 那么 5.png根据之前的分析及图像，很容易得出开关管峰值电流 6.png-α1时开关管电流为零，代入式②可以得到 7.png 8.png ③一个工作周期内，开关管导通时流过的电流的平均值等于输入电流，因此可以得到9.png 10.png ④ 代入式①和③进一步化简可以得到 11.png这样就得到m和导通角Φ之间的关系，进而可以把很多量和导通角Φ联系起来。开关管截止时，两端电压u(θ)为电流在电容CP上的积分 12.png 13.png当开关管电流为零时，电压达到最大值。根据余弦函数图像的对称性可以得知α1时为零，因此开关管电压最大值为14.png再次观察u(θ)的图像，会发现它不是正弦波。用傅里叶公式对其进行正交分解，分解为余弦和正弦两个部分正弦部分 15.png 化简后再代入式③和④得到 16.png⑤ 余弦部分 17.png化简后再代入式④得到 18.png⑥在LX，LS，CS和RL构成的射频串联回路中，LS和CS的作用是只允许与其谐振频率相同的基波通过，其值与谐振频率及品质因数Q的关系在这里不在赘述。式⑤可以看出，开关管两端电压含有正弦成分，而射频电流为余弦函数。为了使功率因数为1，就需要一个电抗抵消掉，提供这个电抗的就是电感LX。抵消后，开关管两端电压剩下的余弦成分就会加在负载电阻上。一个工作周期内，开关管截止时两端的电压的平均值等于电源电压，因此可以得到19.png 20.png⑦可以发现这个式子与之前式⑥极为相似。为了进一步得到各个量之间的关系，进行下面的分析。输入功率为 21.png 因为电路的效率为100%，所以射频功率等于输入功率。22.png 通过比较式⑥和⑦，以及射频电流的峰值电流和有效电流的关系，可以得到23.png射频功率只由负载电阻消耗，因此最右边可以看为负载电阻两端有效电压与有效电流的乘积，进而可以求出负载电阻24.png 根据之前的分析，负载电阻还可以用另一种更为简单的方式求得 25.png通过前面对射频串联回路的分析，可以得到感抗 26.png 进而得出电感值 27.png至此，所有需要计算的元件值都已得出。</p><p><br></p><p><br></p><p>下面检验一下 因为公式复杂，因此用VB写了一个计算器（在附件中） 28.png输入已知量计算 29.png 用multisim把电路搭出来仿真 30.png波形理想，峰值电流和峰值电压与计算相符。经计算，电阻功耗和设计相符。</p><p><br></p><p>当然，E类也有一些缺点比如 难调试峰值电压（导通角为180°时为电源电压3.56倍）与峰值电流（导通角为180°时为输入电流2.68倍）大，对器件要求高。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>考研英语笔记</title>
    <link href="/sun/2023/09/07/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E7%AC%94%E8%AE%B0/"/>
    <url>/sun/2023/09/07/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="考研英语笔记">考研英语笔记</h2><h3 id="英语一题型结构与分值分析">英语一题型结构与分值分析</h3><ol type="1"><li><strong>完型填空</strong></li></ol><p>英语一完型填空，<strong>一共20题10分</strong>，根据上下文从四个选项中选择适合的选项填补文章的空缺。完型填空文章长，难度大，分值低，建立可以把这一部分放在最后复习。</p><ol start="2" type="1"><li><strong>阅读理解</strong></li></ol><p>阅读理解是考研英语的重中之重，也是占比分值较大的板块，英语一有四篇阅读，一篇阅读做五道题，一共20题40分。基础比较好的同学现在就可以开始复习啦。</p><ol start="3" type="1"><li><strong>新题型</strong></li></ol><p>新题型有三种题型，每年只考一种题型，一共10分。这部分的复习也可以安排在后期，实质上也是对阅读理解能力的考察。</p><ol start="4" type="1"><li><strong>翻译</strong></li></ol><p>英语一的翻译是翻译文章中画线的句子，一共10分。翻译对我们的能力要求较高呦，是对考研人综合能力的考察，不过也不用担心，你难大家都难。</p><ol start="5" type="1"><li><strong>作文</strong></li></ol><p>作文一般分为小作文和大作文，小作文100词以上10分，大作文160—200词之间20分。大作文是复习重点。</p><p>英语一的小作文是应用文写作，大作文是看图写作。</p><h3 id="英语一作文详解">英语一作文详解</h3><ol type="1"><li><strong>英语作文万能表格</strong></li></ol><figure><img src="英一图画作文表格.webp" alt="英一图画作文表格" /><figcaption aria-hidden="true">英一图画作文表格</figcaption></figure><ol start="2" type="1"><li><p><strong>四个常见观点:</strong></p><ol type="1"><li>融入社会</li><li>实现人生目标</li><li>培养积极向上的态度</li><li>建立竞争优势</li></ol></li><li><p><strong>例如2010年[文化火锅]可以这样写</strong></p><p>According to the picture,we can see a pot containing a number ofblocks.There are Chines characters on them,,such as [Kung fu],[Buddhism]and [Peking opera].In addition,the title below the picture is veryeye-catching:cultural hotpot enriches our lives.On the one hand,thispainting is very simple,with only a few strokes,but on the other hand,itevokes my deep thoughts on the subject behind it.</p><p>The idea this cartoon wishes to convey is very clear,mainly callingfor us to attach more importance to the quality of opening our mind todifferent cultures.First of all, integrating other excellent cultures isthe basis for our competitive advantage.Undoubtedly,if citizens in anation cannot culivate this quality from an early age,this nation willbe put in a very disadvantageous position when it comes to competingwith others,and they are more likely to fail.Secondly,the progress ofembracing foreign cultures outstanding parts is crucial for us to fostera positive mindest.No one candeny the fact that sticking to this goalcan,to a large extern,motivate us to achieve excellence.</p><p>In short,it is extremely crucial to develop the quality ofintegrating other cultures'positive parts into our own culture,which isof great significance to helping us foster a positive mindest andaccummulate competitive advantages.Therefor,we must alaways remindourselves and the people around us not to give up the pursuit ofit.</p></li><li><p><strong>历年大作文主题</strong></p></li></ol><figure><img src="英一大作文主题.webp" alt="历年大作文主题" /><figcaption aria-hidden="true">历年大作文主题</figcaption></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/sun/2023/09/07/hello-world/"/>
    <url>/sun/2023/09/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>考研高数笔记</title>
    <link href="/sun/2023/09/04/%E8%80%83%E7%A0%94%E9%AB%98%E6%95%B0%E7%AC%94%E8%AE%B0/"/>
    <url>/sun/2023/09/04/%E8%80%83%E7%A0%94%E9%AB%98%E6%95%B0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>等比求和公式 <spanclass="math display">\[\sum_{n=0}^{\infty}a*q^n=a*\frac{1-q^{n+1}}{1-q}\]</span>麦克劳林展开式 <span class="math display">\[\frac{1}{1-x}\rightarrow\sum_{n=0}^{\infty}x^n\]</span></p><p><span class="math display">\[\frac{1}{1+x}\rightarrow\sum_{n=0}^{\infty}(-x)^n\]</span></p><p><span class="math display">\[\frac{1}{1+x^2}\rightarrow\sum_{n=0}^{\infty}(-x^2)^n\]</span></p><p><span class="math display">\[\left(\frac{1}{1-x}\right)^2\rightarrow\sum_{n=0}^{\infty}x^n\]</span></p><p><span class="math display">\[\iiint \limits_{\Omega} z\mathrm{d}x\mathrm{d}y\mathrm{d}z里面的z\neqx^2+y^2 \\z=x^2+y^2与z=4只是限定积分区域的，所以你不能令原式=\int_{0}^{2\pi}\mathrm{d}\theta\int_{\rho^2}^{4}\mathrm{d}z\int_{0}^{2}\rho^3\mathrm{d}\rho\]</span></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin-入门笔记(一)</title>
    <link href="/sun/2023/08/25/Kotlin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/sun/2023/08/25/Kotlin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2id="android-kotlin保存数据的三种方式文件sharedpreferencessqlite">AndroidKotlin保存数据的三种方式（文件，SharedPreferences，SQLite）</h2><h3 id="文件存储">文件存储</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>milk-v点灯教程</title>
    <link href="/sun/2023/08/15/milk-v%E7%82%B9%E7%81%AF%E6%95%99%E7%A8%8B/"/>
    <url>/sun/2023/08/15/milk-v%E7%82%B9%E7%81%AF%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="milk-v-duo点灯教程shell命令shell脚本c语言">milk-vduo点灯教程（shell命令,shell脚本,C语言）</h2><h3 id="点灯前的准备参考此处">点灯前的准备(<ahref="https://milkv.io/zh/docs/duo/getting-started/boot">参考此处</a>)</h3><ol type="1"><li><p>一个烧录好<ahref="https://github.com/milkv-duo/milkv-duo-buildroot-sdk/releases/tag/20230616">最新镜像</a>的milk-vduo板子</p></li><li><p>启用ssh连接到milk-v duo</p></li><li><p>停止开机闪烁led的进程</p></li></ol><p>最新的镜像开机会启动一个闪烁led的进程，我们需要把它停掉才能进行下面的实验。使用top命令查看进程<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">top<br></code></pre></td></tr></table></figure> <img src="top.jpg" alt="top命令" /></p><p>可以看到PID进程号为164的进程，这个就是闪烁led的进程，我们使用kill指令结束它<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 164<br></code></pre></td></tr></table></figure>然后在用top指令发现这个进程已经被结束了，同时led灯也停止了闪烁</p><figure><img src="top2.jpg" alt="top命令" /><figcaption aria-hidden="true">top命令</figcaption></figure><h3 id="shell命令点灯">shell命令点灯</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 440 &gt; /sys/class/gpio/export <span class="hljs-comment">#此时生成/sys/class/gpio/gpio440目录</span><br><span class="hljs-built_in">echo</span> out &gt; /sys/class/gpio/gpio440/direction<span class="hljs-comment">#再配置IO方向为输出：</span><br><span class="hljs-built_in">echo</span> 1 &gt; /sys/class/gpio/gpio440/value<span class="hljs-comment">#点亮LED</span><br><span class="hljs-built_in">echo</span> 0 &gt; /sys/class/gpio/gpio440/value<span class="hljs-comment">#熄灭LED</span><br><span class="hljs-built_in">echo</span> 440 &gt; /sys/class/gpio/unexport<span class="hljs-comment">#释放GPIO资源</span><br></code></pre></td></tr></table></figure><h3 id="shell脚本点灯">shell脚本点灯</h3><ul><li>先用系统自带的vi文本编辑器创建点灯脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi ~/led_blick.sh<br></code></pre></td></tr></table></figure><ul><li>把以下内容复制到脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">LED=440<br><br><span class="hljs-comment"># 激活GPIO-LED</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LED</span> &gt; /sys/class/gpio/export<br><br><span class="hljs-comment"># 设置GPIO-LED 为输出</span><br><span class="hljs-built_in">echo</span> out &gt; /sys/class/gpio/gpio<span class="hljs-variable">$LED</span>/direction<br><br><span class="hljs-comment"># 循环10次：点亮LED，延时1秒，在关闭LED，再延时1秒</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 30)<br><span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> 1 /sys/class/gpio/gpio<span class="hljs-variable">$LED</span>/value<br>  <span class="hljs-built_in">sleep</span> 1<br>  <span class="hljs-built_in">echo</span> 0 /sys/class/gpio/gpio<span class="hljs-variable">$LED</span>/value<br>  <span class="hljs-built_in">sleep</span> 1<br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LED</span> &gt; /sys/class/gpio/unexport<br></code></pre></td></tr></table></figure><ul><li>执行脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x /root/led_blick.sh <span class="hljs-comment">#赋予可执行权限</span><br>/root/led_blick.sh <span class="hljs-comment">#运行脚本</span><br></code></pre></td></tr></table></figure><h3 id="c语言点灯">C语言点灯</h3><ul><li><p>在milk-v duo里编写用于点灯的c源文件或者在电脑上写好传到mlk-vduo上 led_blink.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span> <span class="hljs-comment">//define O_WRONLY and O_RDONLY</span></span><br><br><span class="hljs-comment">// LED 引脚</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_EXPORT <span class="hljs-string">&quot;/sys/class/gpio/export&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_UNEXPORT <span class="hljs-string">&quot;/sys/class/gpio/unexport&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_PIN_VAL <span class="hljs-string">&quot;440&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_DIR <span class="hljs-string">&quot;/sys/class/gpio/gpio440/direction&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_DIR_VAL <span class="hljs-string">&quot;OUT&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_VAL <span class="hljs-string">&quot;/sys/class/gpio/gpio440/value&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_VAL_H <span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_VAL_L <span class="hljs-string">&quot;0&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">30</span>;<br><br>    <span class="hljs-comment">// 打开端口/sys/class/gpio# echo 440 &gt; export</span><br>    fd = open(SYSFS_GPIO_EXPORT, O_WRONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: export open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    write(fd, SYSFS_GPIO_RST_PIN_VAL, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_PIN_VAL));<br>    close(fd);<br><br>    <span class="hljs-comment">// 设置端口方向/sys/class/gpio/gpio440# echo out &gt; direction</span><br>    fd = open(SYSFS_GPIO_RST_DIR, O_WRONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: direction open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    write(fd, SYSFS_GPIO_RST_DIR_VAL, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_DIR_VAL));<br>    close(fd);<br><br>    <span class="hljs-comment">// 输出复位信号: 拉高&gt;100ns</span><br>    fd = open(SYSFS_GPIO_RST_VAL, O_RDWR);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: gpio open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (count)<br>    &#123;<br>        count--;<br>        write(fd, SYSFS_GPIO_RST_VAL_H, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_VAL_H));<br>        usleep(<span class="hljs-number">1000000</span>);<br>        write(fd, SYSFS_GPIO_RST_VAL_L, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_VAL_L));<br>        usleep(<span class="hljs-number">1000000</span>);<br>    &#125;<br>    close(fd);<br><br>    <span class="hljs-comment">// 打开端口/sys/class/gpio# echo 440 &gt; unexport</span><br>    fd = open(SYSFS_GPIO_UNEXPORT, O_WRONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: unexport open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    write(fd, SYSFS_GPIO_RST_PIN_VAL, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_PIN_VAL));<br>    close(fd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>使用下列指令编译 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">riscv64-unknown-linux-gnu-gcc -static -o led_blink led_blink.c<br></code></pre></td></tr></table></figure></p></li><li><p>编译完成后执行即可 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x led_blick <span class="hljs-comment">#赋予可执行权限</span><br>./led_blink <span class="hljs-comment">#运行脚本</span><br></code></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
