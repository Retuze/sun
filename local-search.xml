<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>考研英语笔记</title>
    <link href="/sun/2023/09/07/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E7%AC%94%E8%AE%B0/"/>
    <url>/sun/2023/09/07/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="考研英语笔记">考研英语笔记</h2><h3 id="英语一题型结构与分值分析">英语一题型结构与分值分析</h3><ol type="1"><li><strong>完型填空</strong></li></ol><p>英语一完型填空，<strong>一共20题10分</strong>，根据上下文从四个选项中选择适合的选项填补文章的空缺。完型填空文章长，难度大，分值低，建立可以把这一部分放在最后复习。</p><ol start="2" type="1"><li><strong>阅读理解</strong></li></ol><p>阅读理解是考研英语的重中之重，也是占比分值较大的板块，英语一有四篇阅读，一篇阅读做五道题，一共20题40分。基础比较好的同学现在就可以开始复习啦。</p><ol start="3" type="1"><li><strong>新题型</strong></li></ol><p>新题型有三种题型，每年只考一种题型，一共10分。这部分的复习也可以安排在后期，实质上也是对阅读理解能力的考察。</p><ol start="4" type="1"><li><strong>翻译</strong></li></ol><p>英语一的翻译是翻译文章中画线的句子，一共10分。翻译对我们的能力要求较高呦，是对考研人综合能力的考察，不过也不用担心，你难大家都难。</p><ol start="5" type="1"><li><strong>作文</strong></li></ol><p>作文一般分为小作文和大作文，小作文100词以上10分，大作文160—200词之间20分。大作文是复习重点。</p><p>英语一的小作文是应用文写作，大作文是看图写作。</p><h3 id="英语一作文详解">英语一作文详解</h3><ol type="1"><li><strong>英语作文万能表格</strong></li></ol><figure><img src="英一图画作文表格.webp" alt="英一图画作文表格" /><figcaption aria-hidden="true">英一图画作文表格</figcaption></figure><ol start="2" type="1"><li><p><strong>四个常见观点:</strong></p><ol type="1"><li>融入社会</li><li>实现人生目标</li><li>培养积极向上的态度</li><li>建立竞争优势</li></ol></li><li><p><strong>例如2010年[文化火锅]可以这样写</strong></p><p>According to the picture,we can see a pot containing a number ofblocks.There are Chines characters on them,,such as [Kung fu],[Buddhism]and [Peking opera].In addition,the title below the picture is veryeye-catching:cultural hotpot enriches our lives.On the one hand,thispainting is very simple,with only a few strokes,but on the other hand,itevokes my deep thoughts on the subject behind it.</p><p>The idea this cartoon wishes to convey is very clear,mainly callingfor us to attach more importance to the quality of opening our mind todifferent cultures.First of all, integrating other excellent cultures isthe basis for our competitive advantage.Undoubtedly,if citizens in anation cannot culivate this quality from an early age,this nation willbe put in a very disadvantageous position when it comes to competingwith others,and they are more likely to fail.Secondly,the progress ofembracing foreign cultures outstanding parts is crucial for us to fostera positive mindest.No one candeny the fact that sticking to this goalcan,to a large extern,motivate us to achieve excellence.</p><p>In short,it is extremely crucial to develop the quality ofintegrating other cultures'positive parts into our own culture,which isof great significance to helping us foster a positive mindest andaccummulate competitive advantages.Therefor,we must alaways remindourselves and the people around us not to give up the pursuit ofit.</p></li><li><p><strong>历年大作文主题</strong></p></li></ol><figure><img src="英一大作文主题.webp" alt="历年大作文主题" /><figcaption aria-hidden="true">历年大作文主题</figcaption></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/sun/2023/09/07/hello-world/"/>
    <url>/sun/2023/09/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>考研高数笔记</title>
    <link href="/sun/2023/09/04/%E8%80%83%E7%A0%94%E9%AB%98%E6%95%B0%E7%AC%94%E8%AE%B0/"/>
    <url>/sun/2023/09/04/%E8%80%83%E7%A0%94%E9%AB%98%E6%95%B0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>等比求和公式 <spanclass="math display">\[\sum_{n=0}^{\infty}a*q^n=a*\frac{1-q^{n+1}}{1-q}\]</span>麦克劳林展开式 <span class="math display">\[\frac{1}{1-x}\rightarrow\sum_{n=0}^{\infty}x^n\]</span></p><p><span class="math display">\[\frac{1}{1+x}\rightarrow\sum_{n=0}^{\infty}(-x)^n\]</span></p><p><span class="math display">\[\frac{1}{1+x^2}\rightarrow\sum_{n=0}^{\infty}(-x^2)^n\]</span></p><p><span class="math display">\[\left(\frac{1}{1-x}\right)^2\rightarrow\sum_{n=0}^{\infty}x^n\]</span></p><p><span class="math display">\[\iiint \limits_{\Omega} z\mathrm{d}x\mathrm{d}y\mathrm{d}z里面的z\neqx^2+y^2 \\z=x^2+y^2与z=4只是限定积分区域的，所以你不能令原式=\int_{0}^{2\pi}\mathrm{d}\theta\int_{\rho^2}^{4}\mathrm{d}z\int_{0}^{2}\rho^3\mathrm{d}\rho\]</span></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin-入门笔记(一)</title>
    <link href="/sun/2023/08/25/Kotlin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/sun/2023/08/25/Kotlin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2id="android-kotlin保存数据的三种方式文件sharedpreferencessqlite">AndroidKotlin保存数据的三种方式（文件，SharedPreferences，SQLite）</h2><h3 id="文件存储">文件存储</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>milk-v点灯教程</title>
    <link href="/sun/2023/08/15/milk-v%E7%82%B9%E7%81%AF%E6%95%99%E7%A8%8B/"/>
    <url>/sun/2023/08/15/milk-v%E7%82%B9%E7%81%AF%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="milk-v-duo点灯教程shell命令shell脚本c语言">milk-vduo点灯教程（shell命令,shell脚本,C语言）</h2><h3 id="点灯前的准备参考此处">点灯前的准备(<ahref="https://milkv.io/zh/docs/duo/getting-started/boot">参考此处</a>)</h3><ol type="1"><li><p>一个烧录好<ahref="https://github.com/milkv-duo/milkv-duo-buildroot-sdk/releases/tag/20230616">最新镜像</a>的milk-vduo板子</p></li><li><p>启用ssh连接到milk-v duo</p></li><li><p>停止开机闪烁led的进程</p></li></ol><p>最新的镜像开机会启动一个闪烁led的进程，我们需要把它停掉才能进行下面的实验。使用top命令查看进程<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">top<br></code></pre></td></tr></table></figure> <img src="top.jpg" alt="top命令" /></p><p>可以看到PID进程号为164的进程，这个就是闪烁led的进程，我们使用kill指令结束它<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 164<br></code></pre></td></tr></table></figure>然后在用top指令发现这个进程已经被结束了，同时led灯也停止了闪烁</p><figure><img src="top2.jpg" alt="top命令" /><figcaption aria-hidden="true">top命令</figcaption></figure><h3 id="shell命令点灯">shell命令点灯</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 440 &gt; /sys/class/gpio/export <span class="hljs-comment">#此时生成/sys/class/gpio/gpio440目录</span><br><span class="hljs-built_in">echo</span> out &gt; /sys/class/gpio/gpio440/direction<span class="hljs-comment">#再配置IO方向为输出：</span><br><span class="hljs-built_in">echo</span> 1 &gt; /sys/class/gpio/gpio440/value<span class="hljs-comment">#点亮LED</span><br><span class="hljs-built_in">echo</span> 0 &gt; /sys/class/gpio/gpio440/value<span class="hljs-comment">#熄灭LED</span><br><span class="hljs-built_in">echo</span> 440 &gt; /sys/class/gpio/unexport<span class="hljs-comment">#释放GPIO资源</span><br></code></pre></td></tr></table></figure><h3 id="shell脚本点灯">shell脚本点灯</h3><ul><li>先用系统自带的vi文本编辑器创建点灯脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi ~/led_blick.sh<br></code></pre></td></tr></table></figure><ul><li>把以下内容复制到脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">LED=440<br><br><span class="hljs-comment"># 激活GPIO-LED</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LED</span> &gt; /sys/class/gpio/export<br><br><span class="hljs-comment"># 设置GPIO-LED 为输出</span><br><span class="hljs-built_in">echo</span> out &gt; /sys/class/gpio/gpio<span class="hljs-variable">$LED</span>/direction<br><br><span class="hljs-comment"># 循环10次：点亮LED，延时1秒，在关闭LED，再延时1秒</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 30)<br><span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> 1 /sys/class/gpio/gpio<span class="hljs-variable">$LED</span>/value<br>  <span class="hljs-built_in">sleep</span> 1<br>  <span class="hljs-built_in">echo</span> 0 /sys/class/gpio/gpio<span class="hljs-variable">$LED</span>/value<br>  <span class="hljs-built_in">sleep</span> 1<br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LED</span> &gt; /sys/class/gpio/unexport<br></code></pre></td></tr></table></figure><ul><li>执行脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x /root/led_blick.sh <span class="hljs-comment">#赋予可执行权限</span><br>/root/led_blick.sh <span class="hljs-comment">#运行脚本</span><br></code></pre></td></tr></table></figure><h3 id="c语言点灯">C语言点灯</h3><ul><li><p>在milk-v duo里编写用于点灯的c源文件或者在电脑上写好传到mlk-vduo上 led_blink.c <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span> <span class="hljs-comment">//define O_WRONLY and O_RDONLY</span></span><br><br><span class="hljs-comment">// LED 引脚</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_EXPORT <span class="hljs-string">&quot;/sys/class/gpio/export&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_UNEXPORT <span class="hljs-string">&quot;/sys/class/gpio/unexport&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_PIN_VAL <span class="hljs-string">&quot;440&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_DIR <span class="hljs-string">&quot;/sys/class/gpio/gpio440/direction&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_DIR_VAL <span class="hljs-string">&quot;OUT&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_VAL <span class="hljs-string">&quot;/sys/class/gpio/gpio440/value&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_VAL_H <span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_VAL_L <span class="hljs-string">&quot;0&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">30</span>;<br><br>    <span class="hljs-comment">// 打开端口/sys/class/gpio# echo 440 &gt; export</span><br>    fd = open(SYSFS_GPIO_EXPORT, O_WRONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: export open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    write(fd, SYSFS_GPIO_RST_PIN_VAL, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_PIN_VAL));<br>    close(fd);<br><br>    <span class="hljs-comment">// 设置端口方向/sys/class/gpio/gpio440# echo out &gt; direction</span><br>    fd = open(SYSFS_GPIO_RST_DIR, O_WRONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: direction open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    write(fd, SYSFS_GPIO_RST_DIR_VAL, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_DIR_VAL));<br>    close(fd);<br><br>    <span class="hljs-comment">// 输出复位信号: 拉高&gt;100ns</span><br>    fd = open(SYSFS_GPIO_RST_VAL, O_RDWR);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: gpio open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (count)<br>    &#123;<br>        count--;<br>        write(fd, SYSFS_GPIO_RST_VAL_H, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_VAL_H));<br>        usleep(<span class="hljs-number">1000000</span>);<br>        write(fd, SYSFS_GPIO_RST_VAL_L, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_VAL_L));<br>        usleep(<span class="hljs-number">1000000</span>);<br>    &#125;<br>    close(fd);<br><br>    <span class="hljs-comment">// 打开端口/sys/class/gpio# echo 440 &gt; unexport</span><br>    fd = open(SYSFS_GPIO_UNEXPORT, O_WRONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: unexport open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    write(fd, SYSFS_GPIO_RST_PIN_VAL, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_PIN_VAL));<br>    close(fd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>使用下列指令编译 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">riscv64-unknown-linux-gnu-gcc -static -o led_blink led_blink.c<br></code></pre></td></tr></table></figure></p></li><li><p>编译完成后执行即可 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x led_blick <span class="hljs-comment">#赋予可执行权限</span><br>./led_blink <span class="hljs-comment">#运行脚本</span><br></code></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
