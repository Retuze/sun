<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>milk-v点灯教程</title>
    <link href="/sun/2023/08/15/milk-v%E7%82%B9%E7%81%AF%E6%95%99%E7%A8%8B/"/>
    <url>/sun/2023/08/15/milk-v%E7%82%B9%E7%81%AF%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="milk-v-duo点灯教程（shell命令-shell脚本-C语言）"><a href="#milk-v-duo点灯教程（shell命令-shell脚本-C语言）" class="headerlink" title="milk-v duo点灯教程（shell命令,shell脚本,C语言）"></a>milk-v duo点灯教程（shell命令,shell脚本,C语言）</h2><h3 id="点灯前的准备-参考此处"><a href="#点灯前的准备-参考此处" class="headerlink" title="点灯前的准备(参考此处)"></a>点灯前的准备(<a href="https://milkv.io/zh/docs/duo/getting-started/boot">参考此处</a>)</h3><ul><li>一个烧录好<a href="https://github.com/milkv-duo/milkv-duo-buildroot-sdk/releases/tag/20230616">最新系统</a>的milk-v duo板子 </li><li>启用ssh连接到milk-v duo</li></ul><h3 id="shell命令点灯"><a href="#shell命令点灯" class="headerlink" title="shell命令点灯"></a>shell命令点灯</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> 440 &gt; /sys/class/gpio/export <span class="hljs-comment">#此时生成/sys/class/gpio/gpio440目录</span><br><span class="hljs-built_in">echo</span> out &gt; /sys/class/gpio/gpio440/direction<span class="hljs-comment">#再配置IO方向为输出：</span><br><span class="hljs-built_in">echo</span> 1 &gt; /sys/class/gpio/gpio440/value<span class="hljs-comment">#点亮LED</span><br><span class="hljs-built_in">echo</span> 0 &gt; /sys/class/gpio/gpio440/value<span class="hljs-comment">#熄灭LED</span><br><span class="hljs-built_in">echo</span> 440 &gt; /sys/class/gpio/unexport<span class="hljs-comment">#释放GPIO资源</span><br></code></pre></td></tr></table></figure><h3 id="shell脚本点灯"><a href="#shell脚本点灯" class="headerlink" title="shell脚本点灯"></a>shell脚本点灯</h3><ul><li>先用系统自带的vi文本编辑器创建点灯脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi ~/led_blick.sh<br></code></pre></td></tr></table></figure><ul><li>把以下内容复制到脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">LED=440<br><br><span class="hljs-comment"># 激活GPIO-LED</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LED</span> &gt; /sys/class/gpio/export<br><br><span class="hljs-comment"># 设置GPIO-LED 为输出</span><br><span class="hljs-built_in">echo</span> out &gt; /sys/class/gpio/gpio<span class="hljs-variable">$LED</span>/direction<br><br><span class="hljs-comment"># 循环10次：点亮LED，延时1秒，在关闭LED，再延时1秒</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 30)<br><span class="hljs-keyword">do</span><br>  <span class="hljs-built_in">echo</span> 1 /sys/class/gpio/gpio<span class="hljs-variable">$LED</span>/value<br>  <span class="hljs-built_in">sleep</span> 1<br>  <span class="hljs-built_in">echo</span> 0 /sys/class/gpio/gpio<span class="hljs-variable">$LED</span>/value<br>  <span class="hljs-built_in">sleep</span> 1<br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$LED</span> &gt; /sys/class/gpio/unexport<br></code></pre></td></tr></table></figure><ul><li>执行脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x /root/led_blick.sh <span class="hljs-comment">#赋予可执行权限</span><br>/root/led_blick.sh <span class="hljs-comment">#运行脚本</span><br></code></pre></td></tr></table></figure><h3 id="C语言点灯"><a href="#C语言点灯" class="headerlink" title="C语言点灯"></a>C语言点灯</h3><ul><li><p>在milk-v duo里编写用于点灯的c源文件或者在电脑上写好传到mlk-v duo上<br>led_blink.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span> <span class="hljs-comment">//define O_WRONLY and O_RDONLY</span></span><br><br><span class="hljs-comment">// LED 引脚</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_EXPORT <span class="hljs-string">&quot;/sys/class/gpio/export&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_UNEXPORT <span class="hljs-string">&quot;/sys/class/gpio/unexport&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_PIN_VAL <span class="hljs-string">&quot;440&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_DIR <span class="hljs-string">&quot;/sys/class/gpio/gpio440/direction&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_DIR_VAL <span class="hljs-string">&quot;OUT&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_VAL <span class="hljs-string">&quot;/sys/class/gpio/gpio440/value&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_VAL_H <span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SYSFS_GPIO_RST_VAL_L <span class="hljs-string">&quot;0&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">30</span>;<br><br>    <span class="hljs-comment">// 打开端口/sys/class/gpio# echo 440 &gt; export</span><br>    fd = open(SYSFS_GPIO_EXPORT, O_WRONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: export open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    write(fd, SYSFS_GPIO_RST_PIN_VAL, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_PIN_VAL));<br>    close(fd);<br><br>    <span class="hljs-comment">// 设置端口方向/sys/class/gpio/gpio440# echo out &gt; direction</span><br>    fd = open(SYSFS_GPIO_RST_DIR, O_WRONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: direction open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    write(fd, SYSFS_GPIO_RST_DIR_VAL, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_DIR_VAL));<br>    close(fd);<br><br>    <span class="hljs-comment">// 输出复位信号: 拉高&gt;100ns</span><br>    fd = open(SYSFS_GPIO_RST_VAL, O_RDWR);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: gpio open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (count)<br>    &#123;<br>        count--;<br>        write(fd, SYSFS_GPIO_RST_VAL_H, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_VAL_H));<br>        usleep(<span class="hljs-number">1000000</span>);<br>        write(fd, SYSFS_GPIO_RST_VAL_L, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_VAL_L));<br>        usleep(<span class="hljs-number">1000000</span>);<br>    &#125;<br>    close(fd);<br><br>    <span class="hljs-comment">// 打开端口/sys/class/gpio# echo 440 &gt; unexport</span><br>    fd = open(SYSFS_GPIO_UNEXPORT, O_WRONLY);<br>    <span class="hljs-keyword">if</span> (fd == <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR: unexport open error.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> EXIT_FAILURE;<br>    &#125;<br>    write(fd, SYSFS_GPIO_RST_PIN_VAL, <span class="hljs-keyword">sizeof</span>(SYSFS_GPIO_RST_PIN_VAL));<br>    close(fd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用下列指令编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">riscv64-unknown-linux-gnu-gcc -static -o led_blink led_blink.c<br></code></pre></td></tr></table></figure></li><li><p>编译完成后执行即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x led_blick <span class="hljs-comment">#赋予可执行权限</span><br>./led_blink <span class="hljs-comment">#运行脚本</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/sun/2023/08/13/hello-world/"/>
    <url>/sun/2023/08/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
